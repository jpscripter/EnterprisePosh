#!markdown

# Security in Powershell

## Obvious Stuff
1) Lock down permissions to your solutions
    1) Having poor permissioning on your scripts can lead to edits and secrets being leaked.
1) Be careful code injection
    1) Be careful with user input in general
    1) injection hunter module (https://devblogs.microsoft.com/powershell/powershell-injection-hunter-security-auditing-for-powershell-scripts/)
    1) Management.Automation.Language.CodeGeneration - Methods to escape common injection attacks

#!pwsh

Add-Type -AssemblyName System.Windows.Forms
$FileBrowser = New-Object System.Windows.Forms.OpenFileDialog -Property @{ InitialDirectory = [Environment]::GetFolderPath('Desktop') }
$null = $FileBrowser.ShowDialog()

#!pwsh

$Userinput = "Output';Echo 'mal';'"
$code = "Write-Verbose '$Userinput'"
$code
[Management.Automation.Language.CodeGeneration]::EscapeSingleQuotedStringContent($code)

#!markdown

1) Beware of Over-The-Shoulder Logging
    1) Event log tracks your scripts (Protected Event logging)
    1) Command lines can be seen in Task Manager

#!pwsh

$username = 'Administrator'
$Password = 'P@ssw0rd'
Powershell.exe -command " Invoke-Command {([void]('$username : $Password'))};Start-sleep -Seconds 15 " 

#!pwsh

$username = 'Administrator'
$Password = 'P@ssw0rd'
$Cred = [PScredential]::new($username, (ConvertTo-SecureString -String $Password -AsPlainText -Force))
Get-WinEvent -LogName 'Windows PowerShell' -MaxEvents 20 | where {$PSItem.message -match 'P[a@]ss'}   

#EventVwr.msc
# 800

#!markdown

## Secrets management platform
 1) https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.secretmanagement/?view=ps-modules
 2) Not a lot of options yet

#!pwsh

# Install-Module Microsoft.PowerShell.SecretManagement -Scope CurrentUser -force
# Register-SecretVault -Name LocalStore -ModuleName Microsoft.PowerShell.SecretStore  -DefaultVault
# Reset-SecretStore
# Set-SecretStoreConfiguration
$Password = 'P@ssw0rd'
Set-Secret -Name TestUser -Secret $Password 
$Secret = Get-Secret -Name Testuser

#!markdown

## GO it alone Secrets
1) There are a lot of tricks to secure your passwords, tokens and other secrets. 
1) Security is never perfect but that does not mean you can do nothing to secure secrets.
1) Most Secrets management relies on converting secrets into two or more parts
1) Separating usernames from passwords is a good idea. 

#!markdown

### Group Managed Service accounts
1) GMSA accounts can run scheduled task if configured with powershell
1) Account can't get locked out
1) Permissions are isolated from local system
1) https://www.ephingadmin.com/PasswordlessPowerShell/

#!pwsh

$adgroup = New-ADGroup -DisplayName Testgmsa -name testgmsa -GroupScope Global -PassThru
$GMSA = New-ADServiceAccount -name gmsa-test -DNSHostName gmsa-test.Domain.com -PrincipalsAllowedToRetrieveManagedPassword $adgroup.NAME -PassThru
#Add Computer to AD Group

# Request new token to get Group on the server
KLIST purge -lh 0 -li 0x3e7 purge

Install-ADServiceAccount gmsa-test
Test-ADServiceAccount gmsa-test

$action = New-ScheduledTaskAction $env:ComSpec
$Principle = New-ScheduledTaskPrincipal -UserId  domain\gmsa-test$ -LogonType Password
$trigger = New-ScheduledTaskTrigger -at 23:00 -Daily
Register-ScheduledTask test-gmsa -Action $action -Trigger $trigger -Principal $Principle

#!markdown

### DPAPI
1) Data Protection API is a good solution for some solutions based on AES encryption and built into windows. 
    1) User Keys:  %userprofile%\AppData\Roaming\Microsoft\Protect
    1) Computer Keys: %windir%\system32\microsoft\protect
1) DPAPI is easy to use. 
    1) Browser secrets
    1) Biometrics data
    1) Credential Manager
1) Breaks the secret into two pieces: The encrypted payload and Key encrypted by the user's cred
1) Anyone can decrypt with the user's context

#!pwsh

#Encrypt DPAPI

$secure = ConvertTo-SecureString -String â€˜Password123' -AsPlainText -Force 
$SecureString = ConvertFrom-SecureString -SecureString $secure
$SecureString

#!pwsh

# Decoding DPAPI
$payload = '01000000d08c9ddf0115d1118c7a00c04fc297eb0100000078918e51cd213d4aaa7bc9d791ff0e3100000000020000000000106600000001000020000000f5f8d6405a46bbe537e196b51c21ba321b44e6d235ac5486cfb9998c375c67ab000000000e800000000200002000000042d050329106d2041c6fa61bfb82f86944dd663b4f77d7da8e5612af51f06ddb20000000e9f4e9ee2ebf5e27c18fd3f09932afaabcfb505e86522c133c3a3e233edbc021400000009a6bbb0f7f91faa242448831cadb4cf7cf68189c5b4e99a3da93c228f5bbd3858373535b38ccd6de659231a6daf28ce657617fa6dbdced536126532444d1c7ae'
$securestring = ConvertTo-SecureString -String $payload
$Cred = [PSCredential]::New('User',$SecureString)
$Cred
$Cred.GetNetworkCredential().password

#!markdown

### Symmetric Encryption
1) You pass in the Key used to encrypt and decrypt the secret.
1) Breaks the secret into two pieces: The encrypted payload and the key 

#!pwsh

# Encoding symmetric  

$KeyString = 'someParam2Secure'
$keybytes = [System.Text.Encoding]::UTF8.GetBytes($KeyString)
[Byte[]] $Key = [System.Security.Cryptography.HashAlgorithm]::Create('SHA256').ComputeHash($keybytes)

$secure = ConvertTo-SecureString -String 'Password1234' -AsPlainText -Force 
ConvertFrom-SecureString -SecureString $secure -Key $key

#!pwsh

# Decoding symmetric
$Payload = '76492d1116743f0423413b16050a5345MgB8AGQAMABSAEcASgBXAG0AbQBnAFEAdQB1AEoAegArAFcAagB2AFMAWABIAEEAPQA9AHwAZAA3ADQAYwBmADkAZQBkAGUAYQAxAGQAYwBkAGMAZQA4ADQAOQA5ADUAOAA4AGQANAAxAGIANAA3ADcANgAwAGIAYwBiAGYAYQAxAGYANgA4AGYAZAA2ADgAMQA4ADIAMABkADAAYgAwADUAOQBjADkANQBjADcAYgAyADUAOAA='
$securestring = ConvertTo-SecureString -Key $key -String $Payload
[System.Runtime.InteropServices.marshal]::PtrToStringAuto([System.Runtime.InteropServices.marshal]::SecureStringToBSTR($securestring))

#!markdown

## Code Signing 

1) Code signing effectively pervent script changes on your scripts.
1) Not all tools supports scripts being signed.
1) Needs to be partnered with policy to enforce execution policy.

#!pwsh

Set-ExecutionPolicy AllSigned -Scope Process
$authenticode = New-SelfSignedCertificate -Subject "CustomSigning" -CertStoreLocation Cert:\CurrentUser\my -Type CodeSigningCert
Set-AuthenticodeSignature -Certificate $authenticode -FilePath .\SignedFile.ps1
.\SignedFile.ps1

#!markdown

# Debugging
## Debugging VS Interactive
1) Shows you the status of variables
1) Stop at the point(s) you want
1) Lets you dive into a module context

#!pwsh

# Gathering Data From 
{
    Set-Location E:\Repos\MMS\EnterprisePosh\Debug
    $FilePath = "E:\RunSpaceData.txt"
    Import-Module .\Module.psm1

    $Loops = 10
    $BreakPoint = 3
    
    wait-debugger
    :LoopName For ($Counter = 0; $Counter -LT $loops; $Counter++){
        If ($Counter = $BreakPoint){
            Break LoopName
        }
        "Sleeping $Counter"
        Start-UDFSleep
    }
}.invoke()

#!pwsh

$Scriptblock = {
    $Variable = 'test'
    try{
        Write-error "testError" -Erroraction Stop
    }Catch{
        Wait-Debugger
    }
    Start-UDFSleep 
}
invoke-command $Scriptblock 

#!pwsh

## Configuring VSCode

1) Install OmniSharp and other dependancies 
1) Create launch.json file -> Powershell -> Current File

#!markdown

## Remote Debugging
1) Useful when for troulbeshooting scripts running non-interactively.
1) Able to gather information about the runspace environment.

#!pwsh

# Gathering Data From 
# E:\Repos\Utilities\SysInternals\PSEXEC.exe -s -i cmd
Set-Location E:\Repos\MMS\EnterprisePosh\Debug
$FilePath = "E:\RunSpaceData.txt"
Import-Module .\Module.psm1

$RunSpaceData = @{
    Computername = $ENV:COMPUTERNAME
    PID = $PID
    RunSpace = $Host.Runspace.ID
}
Out-File -FilePath $FilePath -InputObject (Convertto-json $RunSpaceData)

#Wait

$Seconds = 300
For ($Counter = 0; $Counter -lt $Seconds; $Counter++){
    Start-UDFSleep 
}

#!pwsh

# Gathering Data From 
Set-Location E:\Repos\MMS\EnterprisePosh\Debug
$FilePath = "E:\RunSpaceData.txt"
Import-Module .\Module.psm1

$RunSpaceData = @{
    Computername = $ENV:COMPUTERNAME
    PID = $PID
    RunSpace = $Host.Runspace.ID
}
Out-File -FilePath $FilePath -InputObject (Convertto-json $RunSpaceData)

#Wait

$Seconds = 300
For ($Counter = 0; $Counter -lt $Seconds; $Counter++){
    Start-UDFSleep 
}

#!markdown

## Notes
1) You have to be an admin or the same user to enter the HostProcess 
1) Holds the remote runspace up until you detach
1) Errors Easily
1) Integrated consoles are your friend

#!pwsh

# Entering The Runspace
whoami.exe
$FilePath = "E:\RunSpaceData.txt"
$Content = Get-Content -Path $FilePath -Raw
$RunSpaceData = ConvertFrom-Json -InputObject $content

If ($RunSpaceData.ComputerName -NE $ENV:COMPUTERNAME){
    $PSSession = Enter-PSSession -ComputerName $RunSpaceData.ComputerName
    Invoke-Command -ScriptBlock {Enter-PSHostProcess -ID $args} -ArgumentList $RunSpaceData.PID -Session $PSSession
    "Debug-Runspace -id $($RunSpaceData.RunSpace)"|clip
}Else{
    $RunSpaceData
    Enter-PSHostProcess -ID $RunSpaceData.PID
    #get-Runspace
    #Get-RunspaceDebug
    "Debug-Runspace -ID $($RunSpaceData.RunSpace)"|clip
}

# ? or h for help

#!markdown

## Concerned?
1) You need to have admin access
1) This is hard to automate
1) Timing is super difficult
1) You can disable debugging

#!pwsh

$Host.Runspace.Debugger.SetDebugMode([System.Management.Automation.DebugModes]::None)
